type Account @entity {
	id: ID!
	asVoting: VotingContract
	delegationFrom: [VoteDelegation!]! @derivedFrom(field: "delegator")
	delegationTo: [VoteDelegation!]! @derivedFrom(field: "delegatee")
	voteWeigth: [VoteWeight!]! @derivedFrom(field: "account")
	delegateChangedEvent: [DelegateChanged!]! @derivedFrom(field: "delegator")
	delegateChangedFromEvent: [DelegateChanged!]! @derivedFrom(field: "fromDelegate")
	delegateChangedToEvent: [DelegateChanged!]! @derivedFrom(field: "toDelegate")
	delegateVotesChangedEvent: [DelegateVotesChanged!]! @derivedFrom(field: "delegate")
}
type VotingContract @entity {
	id: ID!
	asAccount: Account!
	weight: [VoteWeight!]! @derivedFrom(field: "contract")
	delegation: [VoteDelegation!]! @derivedFrom(field: "contract")
	delegateChangedEvent: [DelegateChanged!]! @derivedFrom(field: "contract")
	delegateVotesChangedEvent: [DelegateVotesChanged!]! @derivedFrom(field: "contract")
}
type VoteDelegation @entity {
	id: ID!
	contract: VotingContract!
	delegator: Account!
	delegatee: Account!
}
type VoteWeight @entity {
	id: ID!
	contract: VotingContract!
	account: Account!
	value: BigInt!
}
type DelegateChanged implements Event @entity {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
	delegation: VoteDelegation
	contract: VotingContract!
	delegator: Account!
	fromDelegate: Account!
	toDelegate: Account!
}
type DelegateVotesChanged implements Event @entity {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
	voteWeight: VoteWeight
	contract: VotingContract!
	delegate: Account!
	oldValue: BigInt!
	newValue: BigInt!
}
interface Event {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
}
type Transaction @entity {
	id: ID!
	timestamp: BigInt!
	blockNumber: BigInt!
	events: [Event!]! @derivedFrom(field: "transaction")
}
